Remainder = case_when(is.na(Remainder) ~ 0,
# since count repl. by interpolated => new remainder for ex NA: = 0
TRUE ~ Remainder),
Seasonal_Adjust = Trend + Remainder, # = count - seasonal)
NA_replace = case_when(is.na(Raw) ~ Interpolated,
# to allow plots line(Raw) + line/points(NA_replace) = count line
TRUE ~ NA_real_),
count = case_when(is.na(Raw) ~ Interpolated,
TRUE ~ Raw)) %>%
dplyr::select(Year_Month, Year, Month, count, Raw, Interpolated,  Trend,
Seasonal, Remainder, Seasonal_Adjust, NA_replace)
levels(stlplus_new$Month) <- month.abb
return(stlplus_new)
}
uts_stlplus_as_tibble <- function(stlplus_data) {
stl_year <- as.character(as.integer(floor(stlplus_data$time)))
stl_month <- as.character(as.integer(round((stlplus_data$time %% 1) * 12 + 1)))
stl_year_month <- paste(stl_year, stl_month, sep = "-")
stlplus_new <- as_tibble(
rownames_to_column(as.data.frame(stlplus_data$data), var = "Index")) %>%
rename(Raw = raw, Seasonal = seasonal, Trend = trend,
Remainder = remainder) %>%
# mutate(Year_Month = yearmonth(stlplus_data$time),
mutate(Year_Month = yearmonth(stl_year_month),
Year = year(Year_Month),
Month = factor(month(Year_Month)),
Interpolated = Seasonal + Trend,
Remainder = case_when(is.na(Remainder) ~ 0,
# since count repl. by interpolated => new remainder for ex NA: = 0
TRUE ~ Remainder),
Seasonal_Adjust = Trend + Remainder, # = count - seasonal)
NA_replace = case_when(is.na(Raw) ~ Interpolated,
# to allow plots line(Raw) + line/points(NA_replace) = count line
TRUE ~ NA_real_),
count = case_when(is.na(Raw) ~ Interpolated,
TRUE ~ Raw)) %>%
dplyr::select(Year_Month, Year, Month, count, Raw, Interpolated,  Trend,
Seasonal, Remainder, Seasonal_Adjust, NA_replace)
levels(stlplus_new$Month) <- month.abb
return(stlplus_new)
}
monthly_climate_basel
source('D:/Wolfgang/Programs-R/R-Package-Build/pkgTS_update_build.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Wolfgang/Programs-R/R-Package-Build/pkgTS_update_build.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Wolfgang/Programs-R/R-Package-Build/pkgTS_update_build.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Wolfgang/Programs-R/R-Package-Build/pkgTS_update_build.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Wolfgang/Programs-R/R-Package-Build/pkgTS_update_build.R', encoding = 'UTF-8', echo=TRUE)
rm(list = c("uts_stlplus_as_tibble"))
############################################################################
# Package Update and Build Procedures
############################################################################
library(devtools)
# devtools::session_info()
library(roxygen2)
library(fs)  # Cross-Platform File System Operations e.g. dir_ls(recurse = TRUE)
# browseVignettes("fs")
library(testthat)
local_edition(3) # testthat 3.0.0 introduces the idea of an “edition” of testthat
library(covr)  # test coverage
## RStudio Project `pkg_name` running => `pkg_path ` = working directory ------
pkg_name <- "pkgTS" # Contain only ASCII letters, numbers, and '.'
pkg_path <- paste0("D:/Wolfgang/Programs-R/R-Package-Build/", pkg_name)
getwd()
# setwd(pkg_path)
fs::dir_ls(recurse = TRUE)
description_update <- TRUE
use_git_init <- FALSE
create_r_and_test_infra <- FALSE
create_data <- FALSE
create_vignette <- FALSE
build_vignette <- FALSE
CRAN_check_and_build <- TRUE
## Update DESCRIPTION file - type Imports, Suggests, .... --------------------
#   has nothing to do with functions imported into the namespace:
#   it just makes sure the package is installed when your package is.
if (description_update) {
usethis::use_package("dplyr", "suggests")
usethis::use_package("testthat", "suggests")
usethis::use_package("tsibble", "suggests")
}
## Git local Repo Initialization (not yet a GitHub remote repository --------
if (use_git_init) {
use_git()  # Initialising local Git repo
}
# dir("./newpkg/", full.names = TRUE, recursive = TRUE)
# dir("./newpkg/R/", full.names = TRUE)
## Manual Steps ------------------------------------------------------------
#
# * Steps to be done manually
#   + DESCRIPTION file update as far as needed
#   + /R folder: move/copy all required *.R files
#   + for this "newpkg" example we have the R files
## Create R and paired test file and test infrastructure --------------------
if (create_r_and_test_infra) {
use_r("fbind")  # creates fbind.R file in /R folder
# note: use helper for Code: Insert Roxygen Skeleton
#       add example
use_test()      # called with active fbind.R pane
#  => setup overall testing infrastructure and
#  => creates paired test file /tests/testthat/test-fbind.R
# usethis::use_test() # Create or edit test files
use_testthat()
}
## First Checks and running all Examples ----------------------------
# load_all() simulates process of building, installing, and attaching functions
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
## run first test ----------------------------------------------------
# a <- factor(c("character", "hits", "your", "eyeballs"))
# b <- factor(c("but", "integer", "where it", "counts"))
# fbind(a, b)
devtools::run_examples()  # runs all examples of the new/changed functions
# source("./../TS_examples.R") # auto-printing is not done, no plots
# => run / entering code at the R command line
## Data - Create and Upload ----------------------------------------------
#
# * Data objects to be stored if needed (e.g. for examples / testthat)
#   + use_data() : stores data objects as *.rda files in /data folder
#     + Beforehand required data are to be loaded in Global Environment.
#     + data.R can provide data description and further data creation
if (create_data) {
library(tidyverse)
corona_data <- readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Corona-Virus/corona_data.RDS")
last_date <- max(corona_data$Date)
last_date <-
corona_data <- corona_data %>%
dplyr::filter(Date <= last_date)
compare_countries <- c("Germany", "Italy", "United States of America")
corona_data_sel <- corona_data %>% filter(Country %in%  compare_countries)
usethis::use_data(corona_data, corona_data_sel, overwrite = TRUE)
monthly_climate_basel <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/monthly_climate_basel.rds")
monthly_climate_giessen <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/monthly_climate_giessen.rds")
usethis::use_data(monthly_climate_basel, monthly_climate_giessen, overwrite = TRUE)
Basel_Temperature_ets_resid <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/Basel_Temp_ets_resid.rds")
usethis::use_data(Basel_Temperature_ets_resid, overwrite = TRUE)
monthly_co2_wide <- readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/Data_rds_Temp_Precip_CO2/Mauna Loa_wide.rds")
usethis::use_data(monthly_co2_wide, overwrite = TRUE)
}
## Create and build Vignettes ------------------------------
#
# Creates new vignette *.RMD file in pkg_folder/vignettes and
#  adds needed packages (suggests knitr, rmarkdown) to DESCRIPTION, ....
if (create_vignette) {
# usethis::use_vignette("my-vignette")
usethis::use_vignette("pkgTS_vignette", title = "Vignette pkgTS TimeSeries Functions")
}
# Build Vignettes -------------------------------------------
# edit beforehand the vignette *.Rmd file(s)
#
# build_vignettes() generates *.html files and stores them in pkg_folder/doc
#  => also needed if changes are given
if (build_vignette) {
devtools::build_vignettes()
}
# !! vignettes only linked and visible on index man if package is loaded via
#                   install.packages("*.tar.gz", ...)
# dir("./newpkg/vignettes/", full.names = TRUE)
# dir("./newpkg/doc/", full.names = TRUE)  # could be: inst/doc/
## Create or Update Documentation with roxygen wrapper  ---------------------
#  - creates help *.Rd files in pkg_folder/man) and
#  - updates NAMESPACE
#   see browseVignettes("roxygen2")
load_all()
devtools::document()
devtools::run_examples()
############################################################################
# Package Update and Build Procedures
############################################################################
library(devtools)
# devtools::session_info()
library(roxygen2)
library(fs)  # Cross-Platform File System Operations e.g. dir_ls(recurse = TRUE)
# browseVignettes("fs")
library(testthat)
local_edition(3) # testthat 3.0.0 introduces the idea of an “edition” of testthat
library(covr)  # test coverage
## RStudio Project `pkg_name` running => `pkg_path ` = working directory ------
pkg_name <- "pkgTS" # Contain only ASCII letters, numbers, and '.'
pkg_path <- paste0("D:/Wolfgang/Programs-R/R-Package-Build/", pkg_name)
getwd()
# setwd(pkg_path)
fs::dir_ls(recurse = TRUE)
description_update <- TRUE
use_git_init <- FALSE
create_r_and_test_infra <- FALSE
create_data <- FALSE
create_vignette <- FALSE
build_vignette <- FALSE
CRAN_check_and_build <- TRUE
## Update DESCRIPTION file - type Imports, Suggests, .... --------------------
#   has nothing to do with functions imported into the namespace:
#   it just makes sure the package is installed when your package is.
if (description_update) {
usethis::use_package("dplyr", "suggests")
usethis::use_package("testthat", "suggests")
usethis::use_package("tsibble", "suggests")
}
## Git local Repo Initialization (not yet a GitHub remote repository --------
if (use_git_init) {
use_git()  # Initialising local Git repo
}
# dir("./newpkg/", full.names = TRUE, recursive = TRUE)
# dir("./newpkg/R/", full.names = TRUE)
## Manual Steps ------------------------------------------------------------
#
# * Steps to be done manually
#   + DESCRIPTION file update as far as needed
#   + /R folder: move/copy all required *.R files
#   + for this "newpkg" example we have the R files
## Create R and paired test file and test infrastructure --------------------
if (create_r_and_test_infra) {
use_r("fbind")  # creates fbind.R file in /R folder
# note: use helper for Code: Insert Roxygen Skeleton
#       add example
use_test()      # called with active fbind.R pane
#  => setup overall testing infrastructure and
#  => creates paired test file /tests/testthat/test-fbind.R
# usethis::use_test() # Create or edit test files
use_testthat()
}
## First Checks and running all Examples ----------------------------
# load_all() simulates process of building, installing, and attaching functions
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
## run first test ----------------------------------------------------
# a <- factor(c("character", "hits", "your", "eyeballs"))
# b <- factor(c("but", "integer", "where it", "counts"))
# fbind(a, b)
devtools::run_examples()  # runs all examples of the new/changed functions
# source("./../TS_examples.R") # auto-printing is not done, no plots
# => run / entering code at the R command line
## Data - Create and Upload ----------------------------------------------
#
# * Data objects to be stored if needed (e.g. for examples / testthat)
#   + use_data() : stores data objects as *.rda files in /data folder
#     + Beforehand required data are to be loaded in Global Environment.
#     + data.R can provide data description and further data creation
if (create_data) {
library(tidyverse)
corona_data <- readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Corona-Virus/corona_data.RDS")
last_date <- max(corona_data$Date)
last_date <-
corona_data <- corona_data %>%
dplyr::filter(Date <= last_date)
compare_countries <- c("Germany", "Italy", "United States of America")
corona_data_sel <- corona_data %>% filter(Country %in%  compare_countries)
usethis::use_data(corona_data, corona_data_sel, overwrite = TRUE)
monthly_climate_basel <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/monthly_climate_basel.rds")
monthly_climate_giessen <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/monthly_climate_giessen.rds")
usethis::use_data(monthly_climate_basel, monthly_climate_giessen, overwrite = TRUE)
Basel_Temperature_ets_resid <-
readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/Basel_Temp_ets_resid.rds")
usethis::use_data(Basel_Temperature_ets_resid, overwrite = TRUE)
monthly_co2_wide <- readRDS("D:/Wolfgang/Programs-R/R-TimeSeriesAnalysis/Climate/Data_rds_Temp_Precip_CO2/Mauna Loa_wide.rds")
usethis::use_data(monthly_co2_wide, overwrite = TRUE)
}
## Create and build Vignettes ------------------------------
#
# Creates new vignette *.RMD file in pkg_folder/vignettes and
#  adds needed packages (suggests knitr, rmarkdown) to DESCRIPTION, ....
if (create_vignette) {
# usethis::use_vignette("my-vignette")
usethis::use_vignette("pkgTS_vignette", title = "Vignette pkgTS TimeSeries Functions")
}
# Build Vignettes -------------------------------------------
# edit beforehand the vignette *.Rmd file(s)
#
# build_vignettes() generates *.html files and stores them in pkg_folder/doc
#  => also needed if changes are given
if (build_vignette) {
devtools::build_vignettes()
}
# !! vignettes only linked and visible on index man if package is loaded via
#                   install.packages("*.tar.gz", ...)
# dir("./newpkg/vignettes/", full.names = TRUE)
# dir("./newpkg/doc/", full.names = TRUE)  # could be: inst/doc/
## Create or Update Documentation with roxygen wrapper  ---------------------
#  - creates help *.Rd files in pkg_folder/man) and
#  - updates NAMESPACE
#   see browseVignettes("roxygen2")
load_all()
devtools::document()
devtools::run_examples()
library(devtools)
# devtools::session_info()
library(roxygen2)
library(fs)  # Cross-Platform File System Operations e.g. dir_ls(recurse = TRUE)
# browseVignettes("fs")
library(testthat)
local_edition(3) # testthat 3.0.0 introduces the idea of an “edition” of testthat
library(covr)  # test coverage
## RStudio Project `pkg_name` running => `pkg_path ` = working directory ------
pkg_name <- "pkgTS" # Contain only ASCII letters, numbers, and '.'
pkg_path <- paste0("D:/Wolfgang/Programs-R/R-Package-Build/", pkg_name)
getwd()
# setwd(pkg_path)
fs::dir_ls(recurse = TRUE)
description_update <- TRUE
use_git_init <- FALSE
create_r_and_test_infra <- FALSE
create_data <- FALSE
create_vignette <- FALSE
build_vignette <- FALSE
CRAN_check_and_build <- TRUE
## First Checks and running all Examples ----------------------------
# load_all() simulates process of building, installing, and attaching functions
load_all() # loads "private" package as is into memory
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
devtools::run_examples()
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
## run first test ----------------------------------------------------
# a <- factor(c("character", "hits", "your", "eyeballs"))
# b <- factor(c("but", "integer", "where it", "counts"))
# fbind(a, b)
devtools::run_examples()  # runs all examples of the new/changed functions
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# => all changes, new R files are in place !
## run first test ----------------------------------------------------
# a <- factor(c("character", "hits", "your", "eyeballs"))
# b <- factor(c("but", "integer", "where it", "counts"))
# fbind(a, b)
devtools::run_examples()  # runs all examples of the new/changed functions
help("%$%")
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
devtools::run_examples()  # runs all examples of the new/changed functions
magrittr::%>%
help("%$%")
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
devtools::run_examples()
warnings()
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
devtools::check()
devtools::build()
detach("package:pkgTS", unload = TRUE)
load_all() # loads "private" package as is into memory
# ggts_histo_forecast_resid, ggts_season,
# ggts_season_w_smooth, ggts_year_over_month
globalVariables(c('IQR', 'sd', 'dnorm', '.resid', '..density..',
'Winter_avg', 'Spring_avg', 'Summer_avg', 'Fall_avg', 'Trend',
'Winter', 'Fall', 'Year', 'Season',
'Year_Month', 'Month', 'Year_Month', 'rol_mean', 'Period'))
devtools::build()
devtools::install()
library(pkgTS)
# package?pkgTS            # opens package man file
# help(package = pkg_name)  # opens package index page
?ggts_trend_facet
# Temperature and Precipitation data
head(monthly_climate_basel)
tail(monthly_climate_basel)
uts_gen_yearly_seasonal_avg(monthly_climate_basel)
# Precipitation data have NAs
dplyr::slice(monthly_climate_giessen %>%
dplyr::filter(Measure == "Precipitation"), 13:32)
uts_gen_yearly_seasonal_avg(monthly_climate_giessen)
#
# ETS model data
head(Basel_Temperature_ets_resid)
str(Basel_Temperature_ets_resid)
ggts_histo_forecast_resid(Basel_Temperature_ets_resid)
#
# CO_2 data wide format
monthly_co2_wide
# Temperature and Precipitation data
head(monthly_climate_basel)
tail(monthly_climate_basel)
uts_gen_yearly_seasonal_avg(monthly_climate_basel)
# Precipitation data have NAs
dplyr::slice(monthly_climate_giessen %>%
dplyr::filter(Measure == "Precipitation"), 13:32)
uts_gen_yearly_seasonal_avg(monthly_climate_giessen)
#
# ETS model data
head(Basel_Temperature_ets_resid)
str(Basel_Temperature_ets_resid)
ggts_histo_forecast_resid(Basel_Temperature_ets_resid)
#
# CO_2 data wide format
monthly_co2_wide
library(stlplus)
library(fpp3)
economics_tsbl <- ggplot2::economics %>%
mutate(Year_Month = yearmonth(date)) %>%
as_tsibble(index = Year_Month)
economics_tsbl %>% has_gaps() # check for time series gaps, fill with fill_gaps()
start_ts <- c(year(min(as.Date(economics_tsbl$Year_Month))), month(min(as.Date(economics_tsbl$Year_Month))))
# convert to time-series object
economics_ts <- ts(economics_tsbl$uempmed, start = start_ts, frequency = 12)
# convert to tibble object
economics_stlplus <- stlplus(economics_ts, s.window = 27, t.window = 1201)
#
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
economics_stlplus <- stlplus(economics_ts, s.window = "per", t.window = 1201)
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
# Temperature and Precipitation data of "Basel" w/o NAs rsp. Giessen w/ NAs
uts_gen_yearly_seasonal_avg(monthly_climate_basel)
uts_gen_yearly_seasonal_avg(monthly_climate_giessen)  # w/ NAs
# note: NAs of Winter_avg does not impact Year_avg if this
# NA is caused by December value of previous year
data <- monthly_climate_basel %>%
dplyr::select(City, Measure, Year, Month, count)
uts_data_check_and_fill_w_na(data, key = "Measure")
# delete all "2017" and "Feb" rows and fill with NAs
data <- monthly_climate_basel %>%
dplyr::filter(Year != 2017 & Month != "Feb")
uts_data_check_and_fill_w_na(data, key = "Measure")
library(stlplus)
library(fpp3)
economics_tsbl <- ggplot2::economics %>%
mutate(Year_Month = yearmonth(date)) %>%
as_tsibble(index = Year_Month)
economics_tsbl %>% has_gaps() # check for time series gaps, fill with fill_gaps()
start_ts <- c(year(min(as.Date(economics_tsbl$Year_Month))), month(min(as.Date(economics_tsbl$Year_Month))))
# convert to time-series object
economics_ts <- ts(economics_tsbl$uempmed, start = start_ts, frequency = 12)
# convert to tibble object
economics_stlplus <- stlplus(economics_ts, s.window = 27, t.window = 1201)
#
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
economics_stlplus <- stlplus(economics_ts, s.window = "per", t.window = 1201)
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
library(stlplus)
library(fpp3)
economics_tsbl <- ggplot2::economics %>%
mutate(Year_Month = yearmonth(date)) %>%
as_tsibble(index = Year_Month)
economics_tsbl %>% has_gaps() # check for time series gaps, fill with fill_gaps()
start_ts <- c(year(min(as.Date(economics_tsbl$Year_Month))), month(min(as.Date(economics_tsbl$Year_Month))))
# convert to time-series object
economics_ts <- stats::ts(economics_tsbl$uempmed,
start = start_ts, frequency = 12)
# convert to tibble object
economics_stlplus <- stlplus::stlplus(economics_ts, s.window = 27, t.window = 1201)
#
uts_stlplus_as_tibble(economics_stlplus)
ggts_decomp(uts_stlplus_as_tibble(economics_stlplus))
# Temperature and Precipitation data
head(monthly_climate_basel)
tail(monthly_climate_basel)
uts_gen_yearly_seasonal_avg(monthly_climate_basel)
# Precipitation data have NAs
dplyr::slice(monthly_climate_giessen %>%
dplyr::filter(Measure == "Precipitation"), 13:32)
uts_gen_yearly_seasonal_avg(monthly_climate_giessen)
#
# ETS model data
head(Basel_Temperature_ets_resid)
str(Basel_Temperature_ets_resid)
ggts_histo_forecast_resid(Basel_Temperature_ets_resid)
#
# CO_2 data wide format
monthly_co2_wide
ggts_histo_forecast_resid(Basel_Temperature_ets_resid)
ggts_year_over_month(
monthly_climate_basel %>%
dplyr::filter(Measure == "Temperature"), period = Year)
ggts_year_over_month
monthly_climate_basel %>%
dplyr::filter(Measure == "Temperature"), period = Year)
ggts_year_over_month(monthly_climate_basel %>%
dplyr::filter(Measure == "Temperature"), period = Year)
monthly_climate_basel
detach("package:pkgTS", unload = TRUE)
load_all()
devtools::document()
devtools::run_examples()
usethis::use_package("tsibble", "imports")
usethis::use_package("lubridate", "imports")
usethis::use_package("stlplus", "suggests")
ggts_season_w_smooth(monthly_climate_basel)
library(pkgTS)
?ggts_trend_facet
?ggts_season_w_smooth
detach("package:pkgTS", unload = TRUE)
load_all()
devtools::document()
usethis::use_package("fpp3", "suggests")
library(pkgTS)
?ggts_trend_facet
?ggts_season_w_smooth
?uts_stlplus_as_tibble
detach("package:pkgTS", unload = TRUE)
load_all()
devtools::document()
devtools::run_examples()
library(pkgTS)  # note: object pkg_name cannot be used !
# package?pkgTS            # opens package man file
# help(package = pkg_name)  # opens package index page
?ggts_trend_facet
